{"version":3,"sources":["serviceWorker.js","services/CourseService.js","components/CourseRowComponent.js","components/CourseListComponent.js","services/ModuleService.js","components/ModuleListComponent.js","services/LessonService.js","components/LessonTabsComponent.js","services/TopicService.js","components/TopicPillsComponent.js","services/WidgetService.js","components/WidgetList.js","components/CourseEditorComponent.js","containers/WidgetListContainer.js","actions/widgetActions.js","components/CourseCardComponent.js","components/CourseGridComponent.js","components/CourseNavbarComponent.js","components/CourseManagerComponent.js","reducers/widgetsReducer.js","reducers/lessonReducer.js","reducers/moduleReducer.js","reducers/courseReducer.js","reducers/topicReducer.js","index.js"],"names":["Boolean","window","location","hostname","match","url","findAllCourses","fetch","then","response","json","createCourse","newCourse","method","body","JSON","stringify","headers","deleteCourse","courseId","updateCourse","CourseRowComponent","state","editing","course","props","this","className","onChange","e","newTitle","target","value","setState","prevState","title","to","_id","owner","modified","onClick","status","updateRowCourses","React","Component","CourseListComponent","style","marginTop","href","courses","map","key","courseUrl","moduleUrl","updateModule","moduleId","newModule","connect","modules","moduleReducer","lessonReducer","courseReducer","dispatch","deleteModule","module","type","createModule","actualModule","okModule","editModule","event","lessonUrl","lessonId","topicReducer","lessons","updateLesson","newLesson","lesson","deleteLesson","createLessonForModule","actualLesson","topicUrl","updateTopic","topicId","newTopic","topics","selectedId","createTopicForLesson","topic","actualTopic","deleteTopic","okTopic","editTopic","setSelectedTopic","WIDGET_URL","findAllWidgets","name","WidgetList","widgets","createWidget","deleteWidget","updateWidget","editWidget","okWidget","widget","id","CourseEditorComponent","widgetsReducer","WidgetService","params","findCourseById","findModulesForCourse","findLessonsForModule","findTopicsForLesson","prevProps","snapshot","aria-label","placeholder","actualCourse","actualModules","CourseCardComponent","src","CourseGridComponent","CourseNavbarComponent","data-toggle","data-target","htmlFor","addCourse","position","bottom","right","CourseManagerComponent","filter","c","Date","toDateString","path","exact","component","initialState","widgetReducer","action","topicsReducer","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15118a51.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n//const url = \"http://wbdv-generic-server.herokuapp.com/api/jannunzi/courses\";\nconst url = \"http://wbdv-generic-server.herokuapp.com/api/hualin/courses\";\n\nexport const findAllCourses = () =>\n    fetch(url)\n        .then(response => response.json())\n\n\nexport const createCourse = (newCourse) =>\n    fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(newCourse),\n        headers: {\n            'content-type': 'application/json'\n        }\n    })\n        .then(response => response.json())\n\n\nexport const deleteCourse = (courseId) =>\n    fetch(`${url}/${courseId}`, {\n        method: 'DELETE'\n    })\n        .then(response => response.json())\n\n\nexport const updateCourse = (courseId, newCourse) =>\n    fetch(`${url}/${courseId}`, {\n        method: 'PUT',\n        body: JSON.stringify(newCourse),\n        headers: {'content-type': 'application/json'}\n    })\n\n\nexport const findCourseById = (courseId) =>\n    fetch(`${url}/${courseId}`)\n        .then(response => response.json())","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {updateCourse} from \"../services/CourseService\";\n\n\nexport default class CourseRowComponent extends React.Component {\n\n    state = {\n        editing: false,\n        course: this.props.course\n    }\n\n\n    render() {\n        return (\n        <tr>\n            <td>\n                {   // if editing state becomes true, hides the course title and shows the field\n                    this.state.editing &&\n                    // value attr is tied to the state value so cannot be modified from field\n                    // instead modify the state value\n                    <input className=\"form-control\"\n                           // e is event that has reference to original DOM element that\n                           // generate this event (i.e. input field)\n                           onChange={(e) => {\n                               const newTitle = e.target.value\n                               this.setState(prevState => ({\n                                   course: {...prevState.course, title: newTitle}\n                               }))\n                           }\n                           }\n                           value={this.state.course.title}/>\n                }\n                {   // if editing state becomes false, hides the field and shows the course title\n                    !this.state.editing &&\n                    <Link to={`/edit/${this.props.course._id}`}>\n                        {this.props.course.title}\n                    </Link>\n                }\n            </td>\n            <td className=\"d-none d-sm-table-cell\">{this.props.course.owner}</td>\n            <td className=\"d-none d-lg-table-cell\">{this.props.course.modified}</td>\n            <td>\n                {   // if editing status turns false, only shows edit and delete button\n                    !this.state.editing &&\n                    <div>\n                    <button\n                    onClick={() => this.setState({editing: true})}\n                    className=\"btn btn-link\">\n                        <i className=\"fa fa-pencil\"/></button>\n                    <button\n                    onClick={() => this.props.deleteCourse(this.props.course)}\n                    className=\"btn btn-link\">\n                        <i className=\"fa fa-trash\"/></button>\n                    </div>\n                }\n\n                {   // if editing status turns true, only shows the save button\n                    this.state.editing &&\n                    <button\n                        onClick={() =>\n                            updateCourse(this.state.course._id, this.state.course)\n                                .then(status => {\n                                    // update the local state of all courses\n                                    this.props.updateRowCourses()\n                                    this.setState({editing: false})\n                                })\n                        }\n                        className=\"btn btn-link\"><i className=\"fa fa-check\"/></button>\n                }\n\n            </td>\n        </tr>\n        )\n    }\n\n\n}\n","import React from 'react';\nimport CourseRowComponent from \"./CourseRowComponent\";\nimport {Link} from \"react-router-dom\";\n\n\nclass CourseListComponent extends React.Component {\n\n\n    render() {\n        return (\n            <div>\n\n            <table className=\"table\" style={{marginTop: \"60px\"}}>\n\n            <thead>\n            <tr>\n                <th>Title</th>\n                <th className=\"d-none d-sm-table-cell\">Owned by</th>\n                <th className=\"d-none d-lg-table-cell\">Last Modified</th>\n                <th>\n                    <Link to=\"/grid\"><i className=\"fa fa-th\"/></Link>\n                    <a className=\"ml-2\" href=\"#\"><i className=\"fa fa-sort-alpha-asc\"/></a>\n                </th>\n            </tr>\n            </thead>\n\n            <tbody>\n            {\n                this.props.courses.map(course =>\n                    <CourseRowComponent\n                        deleteCourse={this.props.deleteCourse}\n                        updateRowCourses={this.props.updateRowCourses}\n                        key={course._id}\n                        course={course}/>\n                )\n            }\n            </tbody>\n            </table>\n\n            </div>\n        );\n    }\n}\n\n\nexport default CourseListComponent;\n","\nconst courseUrl = \"http://wbdv-generic-server.herokuapp.com/api/hualin/courses\"\nconst moduleUrl = \"http://wbdv-generic-server.herokuapp.com/api/hualin/modules\"\n\n\n// this service function retrieves the modules for a given course\n// cares about the parent-child relationship\nexport const findModulesForCourse = (courseId) =>\n    fetch(`${courseUrl}/${courseId}/modules`) // build the url\n        .then(response => response.json())\n\n\nexport const createModuleForCourse = (courseId, newModule) =>\n    fetch(`${courseUrl}/${courseId}/modules`, {\n        method: \"POST\",\n        body: JSON.stringify(newModule),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    })\n        .then(response => response.json())\n\n\n// don't need to know the module to be removed belongs to any course\n// so use moduleUrl\nexport const deleteModule = (moduleId) =>\n    fetch(`${moduleUrl}/${moduleId}`, {\n        method: \"DELETE\"\n    })\n        .then(response => response.json())\n\n\nexport const updateModule = (moduleId, newModule) =>\n    fetch(`${moduleUrl}/${moduleId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(newModule),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    })\n        .then(response => response.json())\n\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {createModuleForCourse, deleteModule, updateModule} from \"../services/ModuleService\";\nimport {Link} from \"react-router-dom\";\n\nexport const CREATE_MODULE = \"CREATE_MODULE\";\nexport const DELETE_MODULE = \"DELETE_MODULE\";\nexport const UPDATE_MODULE = \"UPDATE_MODULE\";\n\n\nconst ModuleListComponent = ({course={}, modules=[], deleteModule, createModule, editModule, okModule, updateModule, moduleId}) =>\n\n    <div>\n        <h5 className=\"text-center\">Modules for {course.title}</h5>\n        <ul className=\"list-group\">\n            {\n\n                modules.map(module =>\n\n                    // highlight the current edited module\n                    <li className={`list-group-item ${module.editing || module._id === moduleId\n                        ? \"active\" : \"\"}`} key={module._id}>\n                        {\n                            !module.editing &&\n                            <span>\n                            <Link to={`/edit/${course._id}/modules/${module._id}`} className=\"text-dark\">\n                                {module.title}\n                            </Link>\n                            <button className=\"btn btn-link pull-right text-dark\" onClick={() => editModule(module)}>\n                                <i className=\"fa fa-pencil\"/></button>\n                            </span>\n                        }\n                        {\n                            module.editing &&\n                            <span>\n                            <input onChange={event => updateModule({\n                                ...module,\n                                title: event.target.value\n                            })}\n                                   className=\"form-control\"\n                                   value={module.title}/>\n                            <button className=\"btn btn-link pull-right text-danger\" onClick={() => deleteModule(module)}>\n                            <i className=\"fa fa-close\"/></button>\n                            <button className=\"btn btn-link pull-right text-success\" onClick={() => okModule(module)}>\n                                <i className=\"fa fa-check\"/></button>\n                            </span>\n                        }\n                    </li>\n                )\n            }\n            <li className=\"list-group-item text-center\">\n                <button onClick={() => createModule(course)} className=\"btn btn-link\">\n                    <i className=\"fa fa-plus\"/></button>\n            </li>\n        </ul>\n\n    </div>\n\n\nconst stateToPropertyMapper = (state) => ({\n    modules: state.moduleReducer.modules,\n    // we render the lessons only when we click on the corresponding module\n    // then module id is appended to url and saved in lesson state\n    moduleId: state.lessonReducer.moduleId,\n    // retrieve the course from course reducer\n    course: state.courseReducer.course\n})\n\nconst propertyToDispatchMapper = (dispatch) => ({\n\n    deleteModule: (module) => deleteModule(module._id)\n        .then(status => dispatch({\n            type: DELETE_MODULE,\n            module: module\n        })),\n\n    // first send the new module to server, once get confirmation from server then pass down to dispatcher\n    // only initialize the module title, since id is generated by database\n    // if id is initialized here, it would fail\n    createModule: (course) => createModuleForCourse(course._id, {title: \"New Module\"})\n        // would comeback with the actual module inserted to server\n        // actual module has an id\n        .then(actualModule => dispatch({\n            type: CREATE_MODULE,\n            module: actualModule\n        })),\n\n    // sends the final update to server\n    okModule: (module) => updateModule(module._id, {...module, editing: false})\n        .then(status => dispatch({\n            type: UPDATE_MODULE,\n            module: {...module, editing: false}\n        })),\n\n    // flip into field to make the element editable\n    editModule: (module) => updateModule(module._id, {...module, editing: true})\n        .then(status => dispatch({\n            type: UPDATE_MODULE,\n            module: {...module, editing: true}\n        })),\n\n    // maintain the intermediate updates in local state managed by reducer\n    updateModule: (module) =>\n        dispatch({\n            type: UPDATE_MODULE,\n            module: module\n        })\n\n        // updateModule(module._id, module)\n        // .then(status => dispatch({\n        //     type: UPDATE_MODULE,\n        //     module: module\n        // }))\n\n})\n\n\n\nexport default connect(stateToPropertyMapper, propertyToDispatchMapper)(ModuleListComponent)\n","\nconst moduleUrl = \"http://wbdv-generic-server.herokuapp.com/api/hualin/modules\"\nconst lessonUrl = \"http://wbdv-generic-server.herokuapp.com/api/hualin/lessons\"\n\n\nexport const findLessonsForModule = (courseId, moduleId) =>\n    fetch(`${moduleUrl}/${moduleId}/lessons`)\n        .then(response => response.json())\n\n\nexport const createLessonForModule = (moduleId, lesson) =>\n    fetch(`${moduleUrl}/${moduleId}/lessons`, {\n        method: \"POST\",\n        body: JSON.stringify(lesson),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then(response => response.json())\n\n\nexport const updateLesson = (lesson) =>\n    fetch(`${lessonUrl}/${lesson._id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(lesson),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then(response => response.json())\n\n\nexport const deleteLesson = lessonId =>\n    fetch(`${lessonUrl}/${lessonId}`, {\n        method: \"DELETE\"\n    }).then(response => response.json())\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {createLessonForModule, deleteLesson, updateLesson} from \"../services/LessonService\";\nimport {Link} from \"react-router-dom\";\nimport \"../styles/LessonTabsComponent.css\";\n\nexport const CREATE_LESSON_FOR_MODULE = \"CREATE_LESSON_FOR_MODULE\";\nexport const DELETE_LESSON = \"DELETE_LESSON\";\nexport const UPDATE_LESSON = \"UPDATE_LESSON\";\n\n\nconst LessonTabsComponent = ({courseId, moduleId, lessons=[], createLessonForModule, deleteLesson, updateLesson, lessonId}) =>\n\n    <div>\n    {/*<h3>lessons for {moduleId}</h3>*/}\n    <ul className=\"nav nav-tabs\">\n        {\n            // each child in a list should have a unique key prop\n            lessons.map(lesson =>\n\n                // highlight the current edited lesson\n                <li className=\"nav-item\" key={lesson._id}>\n                    <a className={`nav-link ${lesson.editing || lesson._id === lessonId ? \"activeTab\" : \"\"}`}>\n                    {\n                        lesson.editing &&\n                        <span>\n                            <input onChange={(event) => updateLesson({\n                                ...lesson, title: event.target.value\n                            })}\n                                   className=\"form-control\"\n                                   value={lesson.title}/>\n\n                             <button className=\"btn btn-link text-success\" onClick={() => updateLesson({...lesson, editing: false})}>\n                                <i className=\"fa fa-check\"/>\n                            </button>\n\n                            <button className=\"btn btn-link text-danger\" onClick={() => deleteLesson(lesson._id)}>\n                                <i className=\"fa fa-close\"/>\n                            </button>\n\n                        </span>\n                    }\n                    {\n                        !lesson.editing &&\n                        <span>\n                            <Link to={`/edit/${courseId}/modules/${moduleId}/lessons/${lesson._id}`} className=\"text-dark\">\n                                {lesson.title}\n                            </Link>\n                            <button className=\"btn btn-link text-dark\" onClick={() => updateLesson({...lesson, editing: true})}>\n                                <i className=\"fa fa-pencil\"/>\n                            </button>\n                        </span>\n                    }\n                    </a>\n                </li>\n            )\n        }\n        <li className=\"nav-item\">\n            <a className=\"nav-link\">\n            <button className=\"btn btn-link\" onClick={() => createLessonForModule(moduleId)}>\n                <i className=\"fa fa-plus\"/></button>\n            </a>\n        </li>\n    </ul>\n    </div>\n\n\n// lesson state is also used in the module component\nconst stateToPropertyMapper = (state) => ({\n    moduleId: state.lessonReducer.moduleId,\n    lessonId: state.topicReducer.lessonId,\n    lessons: state.lessonReducer.lessons,\n    courseId: state.lessonReducer.courseId\n    // we can also get courseId from courseReducer\n    // course: state.courseReducer.course\n})\n\n\nconst propertyToDispatchMapper = (dispatch) => ({\n\n    updateLesson: (newLesson) =>\n        updateLesson(newLesson)\n            // update returns status that can be ignored\n            .then(status => dispatch({\n                type: UPDATE_LESSON,\n                lesson: newLesson\n            })),\n\n    deleteLesson: (lessonId) =>\n        deleteLesson(lessonId)\n            // delete returns status\n            .then(status => dispatch({\n                type: DELETE_LESSON,\n                lessonId: lessonId\n            })),\n\n    createLessonForModule: (moduleId) => createLessonForModule(\n        moduleId,\n        {title: \"New Lesson\"})\n        // create returns the actual lesson with id\n        .then(actualLesson => dispatch({\n            type: CREATE_LESSON_FOR_MODULE,\n            lesson: actualLesson\n        }))\n\n})\n\n\nexport default connect (stateToPropertyMapper, propertyToDispatchMapper)(LessonTabsComponent)","\nconst lessonUrl = \"http://wbdv-generic-server.herokuapp.com/api/hualin/lessons\"\nconst topicUrl = \"http://wbdv-generic-server.herokuapp.com/api/hualin/topics\"\n\n\nexport const findTopicsForLesson = (lessonId) =>\n    fetch(`${lessonUrl}/${lessonId}/topics`)\n        .then(response => response.json())\n\n\nexport const createTopicForLesson = (lessonId, topic) =>\n    fetch(`${lessonUrl}/${lessonId}/topics`, {\n        method: \"POST\",\n        body: JSON.stringify(topic),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then(response => response.json())\n\n\nexport const deleteTopic = (topicId) =>\n    fetch(`${topicUrl}/${topicId}`, {\n        method: \"DELETE\"\n    })\n        .then(response => response.json())\n\n\nexport const updateTopic = (topicId, newTopic) =>\n    fetch(`${topicUrl}/${topicId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(newTopic),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then(response => response.json())\n\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {createTopicForLesson, deleteTopic, updateTopic} from \"../services/TopicService\";\nexport const CREATE_TOPIC_FOR_LESSON = \"CREATE_TOPIC_FOR_LESSON\";\nexport const DELETE_TOPIC = \"DELETE_TOPIC\";\nexport const UPDATE_TOPIC = \"UPDATE_TOPIC\";\n\n\nconst TopicPillsComponent = ({topics=[], lessonId, createTopicForLesson, deleteTopic, updateTopic, okTopic, editTopic, setSelectedTopic, selectedId}) =>\n\n    <div className=\"mt-4\">\n    {/*<h3>Topics for {lessonId}</h3>*/}\n    <ul className=\"nav nav-pills\">\n        {\n            topics.map(topic =>\n\n                // highlight the current edited topic\n                <li className=\"nav-item\" key={topic._id}>\n                    <a className={`nav-link ${topic.editing || topic._id === selectedId ? \"active\" : \"\"}`}>\n\n                        {\n                            !topic.editing &&\n                            <span>\n\n                            <a href=\"#\" onClick={() => setSelectedTopic(topic._id)} className=\"text-dark\">\n                            {topic.title}\n                            </a>\n\n                            <button className=\"btn btn-link text-dark\" onClick={() => editTopic(topic)}>\n                                <i className=\"fa fa-pencil\"/></button>\n                            </span>\n                        }\n                        {\n                            topic.editing &&\n                            <span>\n                            <input onChange={(event) => updateTopic({\n                                ...topic,\n                                title: event.target.value\n                            })}\n                                   className=\"form-control\"\n                                   value={topic.title}/>\n\n                            <button className=\"btn btn-link text-success\" onClick={() => okTopic(topic)}>\n                                <i className=\"fa fa-check\"/></button>\n\n                            <button className=\"btn btn-link text-danger\" onClick={() => deleteTopic(topic._id)}>\n                                <i className=\"fa fa-close\"/></button>\n\n                            </span>\n                        }\n                    </a>\n                </li>\n            )\n        }\n        <li className=\"nav-item\">\n            <a className=\"nav-link\">\n            <button className=\"btn btn-link\" onClick={() => createTopicForLesson(lessonId)}>\n                <i className=\"fa fa-plus\"/></button>\n            </a>\n        </li>\n    </ul>\n    </div>\n\n\nconst stateToPropertyMapper = (state) => ({\n    topics: state.topicReducer.topics,\n    lessonId: state.topicReducer.lessonId,\n    selectedId: state.topicReducer.selectedId\n})\n\n\nconst propertyToDispatchMapper = (dispatch) => ({\n\n    createTopicForLesson: (lessonId) =>\n        createTopicForLesson(lessonId, {title: \"New Topic\"})\n        .then(actualTopic => dispatch({\n            type: CREATE_TOPIC_FOR_LESSON,\n            topic: actualTopic\n        })),\n    deleteTopic: (topicId) => deleteTopic(topicId)\n        .then(status => dispatch({\n            type: DELETE_TOPIC,\n            topicId: topicId\n        })),\n    okTopic: (topic) => updateTopic(topic._id, {...topic, editing: false})\n        .then(status => dispatch({\n            type: UPDATE_TOPIC,\n            topic: {...topic, editing: false}\n        })),\n    editTopic: (topic) => updateTopic(topic._id, {...topic, editing: true})\n        .then(status => dispatch({\n            type: UPDATE_TOPIC,\n            topic: {...topic, editing: true}\n        })),\n    updateTopic: (topic) =>\n        dispatch({\n            type: UPDATE_TOPIC,\n            topic: topic\n        }),\n\n    setSelectedTopic: (topicId) => dispatch({\n        type: \"SET_SELECTED_TOPIC\",\n        selectedId: topicId\n    })\n\n\n\n})\n\n\n\nexport default connect (stateToPropertyMapper, propertyToDispatchMapper)(TopicPillsComponent);","\nconst WIDGET_URL = \"http://localhost:8080/api/widgets\";\n\nexport const findAllWidgets = () =>\n    fetch(WIDGET_URL)\n        .then(response => response.json())\n\n\nexport const createWidget = () =>\n    fetch(WIDGET_URL, {\n        method: \"POST\",\n        body: JSON.stringify({name: \"NEW HEADING\", type: \"HEADING\"}),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    }).then(response => response.json())\n\n\nexport default {\n    findAllWidgets,\n    createWidget\n}","import React from \"react\";\n\n\nconst WidgetList = ({widgets=[], createWidget, deleteWidget, updateWidget, editWidget, okWidget}) =>\n    <div>\n        <ul className=\"list-group\">\n            {\n                widgets.map(widget =>\n                    // as we iterate, each list item should have a unique identifier\n                    <li className=\"list-group-item\" key={widget.id}>\n\n                        {   // if editing, shows the field, delete and ok button\n                            widget.editing &&\n                            <span>\n                            <input onChange={event => updateWidget({\n                                // copy the data in old widget and overwrite with new value in input field\n                                ...widget, name: event.target.value\n                            })}\n                                   className=\"form-control\"\n                                   value={widget.name}/>\n                            <button className=\"btn btn-link pull-right\" onClick={() => deleteWidget(widget)}>\n                                <i className=\"fa fa-close\"/></button>\n                            <button className=\"btn btn-link pull-right\" onClick={() => okWidget(widget)}>\n                                <i className=\"fa fa-check\"/></button></span>\n\n                        }\n                        {   // if not editing, shows the title and edit button\n                            !widget.editing &&\n                            <span>\n                                {widget.name}\n                                {widget.type}\n                                {/*{JSON.stringify(widget)}*/}\n                                <button className=\"btn btn-link pull-right\" onClick={() => editWidget(widget)}>\n                                    <i className=\"fa fa-pencil\"/></button>\n                            </span>\n                        }\n\n                    </li>)\n            }\n            <li className=\"list-group-item text-center\">\n                <button className=\"btn btn-primary\" onClick={createWidget}>+</button>\n            </li>\n        </ul>\n    </div>\n\nexport default WidgetList;\n","import React from \"react\";\nimport {findCourseById} from \"../services/CourseService\";\nimport {Link} from \"react-router-dom\";\nimport ModuleListComponent from \"./ModuleListComponent\";\nimport {connect} from \"react-redux\";\nimport {findModulesForCourse} from \"../services/ModuleService\";\nimport {findLessonsForModule} from \"../services/LessonService\";\nimport LessonTabsComponent from \"./LessonTabsComponent\";\nimport {findTopicsForLesson} from \"../services/TopicService\";\nimport TopicPillsComponent from \"./TopicPillsComponent\";\nimport {findAllWidgets} from \"../services/WidgetService\";\nimport WidgetListContainer from \"../containers/WidgetListContainer\";\nexport const SET_COURSES = \"SET_COURSES\";\nexport const FIND_MODULES_FOR_COURSE = \"FIND_MODULES_FOR_COURSE\";\nexport const FIND_LESSONS_FOR_MODULE = \"FIND_LESSONS_FOR_MODULE\";\nexport const FIND_TOPICS_FOR_LESSON = \"FIND_TOPICS_FOR_LESSON\";\n\n\nclass CourseEditorComponent extends React.Component{\n\n    // this lifecycle hook makes invocation to server\n    // also used to retrieve the modules associated with a course\n    componentDidMount() {\n        // router is passing the props, which contains course id and module id\n        const courseId = this.props.match.params.courseId\n        const moduleId = this.props.match.params.moduleId\n        const lessonId = this.props.match.params.lessonId\n\n        // invoke service functions and only render the parent component\n        this.props.findCourseById(courseId)\n        this.props.findModulesForCourse(courseId)\n        // when the editor is first loaded, no id is passed from url until we click\n        // on any link, so no child component is rendered\n        if (moduleId) {\n            this.props.findLessonsForModule(courseId, moduleId)\n        }\n        if (lessonId) {\n            this.props.findTopicsForLesson(lessonId)\n        }\n\n        this.props.findAllWidgets()\n\n\n    }\n\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const courseId = this.props.match.params.courseId\n        const moduleId = this.props.match.params.moduleId\n        const lessonId = this.props.match.params.lessonId\n\n        // if the props is changed as url is changed, fetch a new set of lessons\n        if (moduleId !== prevProps.match.params.moduleId) {\n            this.props.findLessonsForModule(courseId, moduleId)\n        }\n        if (lessonId !== prevProps.match.params.lessonId) {\n            this.props.findTopicsForLesson(lessonId)\n        }\n\n    }\n\n\n    render() {\n        return (\n        <div>\n            <h2 className=\"my-3\">\n                <Link to=\"/\"><i className=\"fa fa-home\"/></Link>\n                <span className=\"ml-2\">{this.props.course.title}</span>\n            </h2>\n\n            <div className=\"row\">\n\n                <div className=\"col-4\">\n                    <ModuleListComponent/>\n                </div>\n\n                <div className=\"col-8\">\n\n                    <LessonTabsComponent/>\n\n                    <TopicPillsComponent/>\n\n                    {/*<WidgetListContainer/>*/}\n                    \n                    <div className=\"mt-5 d-flex align-items-center\">\n                        <button className=\"btn btn-success\">Save</button>\n                        <span className=\"ml-3 mr-1\">Preview</span>\n                        <a href=\"#\"><i className=\"fa fa-toggle-on fa-2x\"/></a>\n                    </div>\n\n                    <form className=\"form-inline my-3\">\n                        <span className=\"font-weight-bold h3\">Heading Widget</span>\n                        <div className=\"form-group ml-auto\">\n                            <select className=\"form-control\" aria-label=\"widget-dropdown\">\n                                <option>Heading</option>\n                                <option>YouTube</option>\n                                <option>Slides</option>\n                                <option>Image</option>\n                                <option>List</option>\n                            </select>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-warning ml-2\"><i className=\"fa fa-arrow-up\"/></button>\n                        <button type=\"submit\" className=\"btn btn-warning ml-2\"><i className=\"fa fa-arrow-down\"/></button>\n                        <button type=\"submit\" className=\"btn btn-danger ml-2\"><i className=\"fa fa-trash\"/></button>\n                    </form>\n\n                    <form>\n                        <div className=\"form-row\">\n\n                            <div className=\"form-group col-sm-6\">\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Heading text\"\n                                       aria-label=\"heading-text\"/>\n                            </div>\n\n                            <div className=\"form-group col-sm-6\">\n                                <select className=\"form-control\" id=\"widget-type\" aria-label=\"widget-type\">\n                                    <option>Heading 1</option>\n                                    <option>Heading 2</option>\n                                    <option>Heading 3</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <input className=\"form-control\" type=\"text\" placeholder=\"Type widget name\"\n                               aria-label=\"widget-name\"/>\n\n                    </form>\n\n                    <p className=\"font-weight-bold h4 mt-4\">Preview</p>\n                    <p> Heading Text</p>\n\n                </div>\n            </div>\n        </div>\n        )\n    }\n\n}\n\nconst stateToPropertyMapper = (state) => ({\n    course: state.courseReducer.course\n})\n\n\nconst propertyToDispatchMapper = (dispatch) => ({\n\n    findAllWidgets: () => findAllWidgets().then(widgets => dispatch({\n        type: \"FIND_ALL_WIDGETS\",\n        widgets: widgets\n        })),\n\n    // findCourseById is the props attr\n    // props name is same as name of service function\n    findCourseById: (courseId) => {findCourseById(courseId)\n        .then(actualCourse => dispatch({\n            type: SET_COURSES,\n            course: actualCourse\n        }))\n    },\n\n    findModulesForCourse: (courseId) => findModulesForCourse(courseId)\n        .then(actualModules => dispatch({\n            type: FIND_MODULES_FOR_COURSE,\n            modules: actualModules\n        })),\n\n    findLessonsForModule: (courseId, moduleId) => findLessonsForModule(courseId, moduleId)\n        .then(lessons => dispatch({\n            type: FIND_LESSONS_FOR_MODULE,\n            lessons: lessons,\n            moduleId: moduleId,\n            courseId: courseId\n        })),\n\n    findTopicsForLesson: (lessonId) => findTopicsForLesson(lessonId)\n        .then(topics => dispatch({\n            type: FIND_TOPICS_FOR_LESSON,\n            topics: topics,\n            lessonId: lessonId\n        }))\n\n\n\n})\n\n\nexport default connect (stateToPropertyMapper, propertyToDispatchMapper)(CourseEditorComponent)","import React from \"react\";\nimport WidgetList from \"../components/WidgetList\";\nimport {connect} from \"react-redux\";\nimport {createWidget, deleteWidget, updateWidget, editWidget, okWidget} from \"../actions/widgetActions\";\n\nconst stateToPropertyMapper = (state) => ({\n    widgets: state.widgetsReducer.widgets\n})\n\nconst propertyToDispatchMapper = (dispatch) => ({\n    deleteWidget: (widget) => deleteWidget(dispatch, widget),\n    createWidget: () => createWidget(dispatch),\n    updateWidget: (widget) => updateWidget(dispatch, widget),\n    editWidget: (widget) => editWidget(dispatch, widget),\n    okWidget: (widget) => okWidget(dispatch, widget)\n})\n\nexport default connect\n(stateToPropertyMapper, propertyToDispatchMapper)\n(WidgetList)\n","import WidgetService from \"../services/WidgetService\";\n\nexport const DELETE_WIDGET = \"DELETE_WIDGET\"\nexport const CREATE_WIDGET = \"CREATE_WIDGET\"\nexport const UPDATE_WIDGET = \"UPDATE_WIDGET\"\n\n\n// pass the actual widget with new name\nexport const updateWidget = (dispatch, widget) => {\n    dispatch({type: UPDATE_WIDGET, widget: widget})\n}\n\n\nexport const deleteWidget = (dispatch, widget) => {\n    dispatch({type: DELETE_WIDGET, widget})\n}\n\n\nexport const createWidget = (dispatch) =>\n    WidgetService.createWidget().then(widget => dispatch({\n        type: CREATE_WIDGET,\n        widget: widget\n    }))\n\n\n\nexport const editWidget = (dispatch, widget) => {\n    // pass the updated widget with editing status true\n    // same as the update action type\n    dispatch({type: UPDATE_WIDGET, widget: {...widget, editing: true}})\n}\n\nexport const okWidget = (dispatch, widget) => {\n    dispatch({type: UPDATE_WIDGET, widget: {...widget, editing: false}})\n}\n\n\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {updateCourse} from \"../services/CourseService\";\n\n\nexport default class CourseCardComponent extends React.Component {\n\n    state = {\n        course: this.props.course,\n        editing: false\n    }\n\n\n    render() {\n        return (\n            // make the cards responsive to different screen size\n            <div className=\"col-xl-2 col-lg-3 col-md-4 col-sm-6 col-xs-1\">\n\n            <div className=\"card\">\n                <img className=\"card-img-top\"\n                     src=\"https://picsum.photos/300/200\"/>\n\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">\n                        {this.state.course.title}\n                    </h5>\n                    <p className=\"card-text\">\n                        Course ID: {this.state.course._id}\n                    </p>\n                    <p className=\"card-text\">\n                        Modified: {this.state.course.modified}\n                    </p>\n                    <Link className=\"btn btn-primary\"\n                          to={`/edit/${this.props.course._id}`}>More...</Link>\n\n                    {\n                        !this.state.editing &&\n                        <div>\n                        <button\n                            onClick={() => this.setState({editing: true})}\n                            className=\"btn btn-link\">\n                            <i className=\"fa fa-pencil\"/></button>\n                        <button\n                        onClick={() => this.props.deleteCourse(this.props.course)}\n                        className=\"btn btn-link\">\n                            <i className=\"fa fa-trash\"/></button>\n                        </div>\n                    }\n                    {\n                        this.state.editing &&\n                        <button\n                            onClick={() =>\n                                updateCourse(this.state.course._id, this.state.course)\n                                    .then(status => {\n                                        this.props.updateRowCourses()\n                                        this.setState({editing: false})\n                                    })\n                            }\n                            className=\"btn btn-link\">\n                            <i className=\"fa fa-check\"/>\n                        </button>\n                    }\n\n                    {\n                        this.state.editing &&\n                        // value attr is tied to the state value so cannot modified from field\n                        // instead modify the state value\n                        <input className=\"form-control\"\n                            // e is event that has reference to original DOM element that\n                            // generate this event (i.e. input field)\n                               onChange={(e) => {\n                                   const newTitle = e.target.value\n                                   this.setState(prevState => ({\n                                       course: {...prevState.course, title: newTitle}\n                                   }))\n                               }\n                               }\n                               value={this.state.course.title}/>\n                    }\n                    {\n                        // !this.state.editing &&\n                        // <Link to={`/edit/${this.props.course._id}`}>\n                        //     {this.props.course.title}\n                        // </Link>\n                    }\n\n                </div>\n            </div>\n\n            </div>\n        )\n\n    }\n\n\n}\n\n","import React from \"react\";\nimport CourseCardComponent from \"./CourseCardComponent\";\nimport {Link} from \"react-router-dom\";\n\n\nexport default class CourseGridComponent extends React.Component {\n\n\n    render() {\n        return (\n            <div>\n\n            <table className=\"table\" style={{marginTop: \"60px\"}}>\n            <thead>\n            <tr>\n                <th className=\"d-none d-sm-table-cell\">Recent documents</th>\n                <th className=\"d-none d-sm-table-cell\">Owned by me</th>\n                <th>\n                    <Link to=\"/\"><i className=\"fa fa-list\"/></Link>\n                    <a className=\"ml-2\" href=\"#\"><i className=\"fa fa-sort-alpha-asc\"/></a>\n                </th>\n            </tr>\n            </thead>\n            </table>\n\n            <div className=\"card-deck mt-5\">\n                {\n                    this.props.courses.map((course) =>\n                        <CourseCardComponent\n                            course={course}\n                            deleteCourse={this.props.deleteCourse}\n                            updateRowCourses={this.props.updateRowCourses}\n                            key={course._id}/>\n                    )\n                }\n            </div>\n\n            </div>\n        )\n    }\n\n}","import React from \"react\";\n\nexport default class CourseNavbarComponent extends React.Component {\n\n    state = {\n        title: \"New Course\"\n    }\n\n    render() {\n        return (\n        <div>\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark fixed-top\">\n                <a className=\"navbar-brand d-none d-sm-block\" href=\"#\">Course Manager</a>\n                <button className=\"navbar-toggler wbdv-field wbdv-hamburger\"\n                        type=\"button\"\n                        data-toggle=\"collapse\"\n                        data-target=\"#hidden-dropdown\">\n                    <span className=\"navbar-toggler-icon\"/>\n                </button>\n\n                <div className=\"collapse navbar-collapse\"\n                     id=\"hidden-dropdown\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"#\">Home</a></li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Log in</a></li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">User Admin</a></li>\n                    </ul>\n                </div>\n\n                <form className=\"form-inline\">\n                    <label htmlFor=\"title-fld\" className=\"wbdv-label wbdv-course-manager\"/>\n                    <div className=\"input-group\">\n\n                        <input type=\"text\"\n                               id=\"title-fld\"\n                               className=\"form-control\"\n                               onChange={(e) => {\n                                   const newTitle = e.target.value\n                                   this.setState({title: newTitle})\n                               }}\n                               // value={this.state.title}\n                               placeholder=\"New course title\"/>\n\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-success\" onClick={() => this.props.addCourse(this.state.title)} type=\"button\">\n                                +\n                            </button>\n                        </div>\n                    </div>\n                </form>\n\n            </nav>\n\n            <button className=\"btn btn-success\"\n                    style={{position: \"fixed\", bottom: 0, right: 0}}\n                    onClick={() => this.props.addCourse(this.state.title)}><i className=\"fa fa-plus-circle\"/></button>\n\n        </div>\n\n        )\n    }\n\n}","import React from \"react\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport CourseListComponent from \"./CourseListComponent\";\nimport CourseEditorComponent from \"./CourseEditorComponent\";\nimport CourseGridComponent from \"./CourseGridComponent\";\nimport CourseNavbarComponent from \"./CourseNavbarComponent\";\nimport {createCourse, findAllCourses, deleteCourse} from \"../services/CourseService\";\n\n\nexport default class CourseManagerComponent extends React.Component {\n\n    state = {\n        courses: []\n    }\n\n\n    componentDidMount() {\n        findAllCourses()\n            .then(courses => {\n                this.setState({courses: courses})\n            })\n    }\n\n\n    // update the local state with the courses data on the server\n    updateRowCourses = () => {\n        findAllCourses()\n            .then(courses => {\n                this.setState({\n                    courses: courses\n                })\n            })\n    }\n\n\n    deleteCourse = (course) => {\n        deleteCourse(course._id)\n            .then(status => this.setState(prevState => ({\n                    // create a new array of courses, where the course that matches\n                    // the specified id is removed\n                    courses: prevState.courses.filter(c => c._id !== course._id)\n                })\n            ))\n    }\n\n\n    addCourse = (newTitle) => {\n        const newCourse = {\n            title: newTitle,\n            owner: \"me\",\n            modified: (new Date()).toDateString()\n        }\n        createCourse(newCourse)\n            .then(actualCourse => this.setState(prevState => ({\n                courses: [\n                    ...prevState.courses, actualCourse\n                ]\n            })))\n    }\n\n\n    render() {\n        return (\n            <div>\n                <BrowserRouter>\n\n                    <div className = \"container\">\n                        <Route path=\"/\" exact>\n                            <CourseListComponent\n                                courses={this.state.courses}\n                                addCourse={this.addCourse}\n                                deleteCourse={this.deleteCourse}\n                                updateRowCourses={this.updateRowCourses}/>\n                        </Route>\n\n                        <Route path={[\"/edit/:courseId\",\n                            \"/edit/:courseId/modules/:moduleId\",\n                            \"/edit/:courseId/modules/:moduleId/lessons/:lessonId\"]} exact component={CourseEditorComponent}/>\n\n                        <Route path=\"/grid\" exact>\n                            <CourseGridComponent\n                                courses={this.state.courses}\n                                addCourse={this.addCourse}\n                                deleteCourse={this.deleteCourse}\n                                updateRowCourses={this.updateRowCourses}/>\n                        </Route>\n                    </div>\n\n                    <Route path={[\"/\", \"/grid\"]} exact>\n                        <CourseNavbarComponent addCourse={this.addCourse}/>\n                    </Route>\n\n                </BrowserRouter>\n            </div>\n        )\n\n    }\n}","import {DELETE_WIDGET, CREATE_WIDGET, UPDATE_WIDGET} from \"../actions/widgetActions\";\n\n\nconst initialState = {\n    widgets: []\n}\n\nconst widgetReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case CREATE_WIDGET:\n            return {\n                widgets: [...state.widgets, action.widget]\n            }\n        case UPDATE_WIDGET:\n            return {\n                // map recreates the widget list\n                widgets: state.widgets.map(widget => widget._id === action.widget._id ?\n                        action.widget : widget)\n            }\n\n        case DELETE_WIDGET:\n            return {\n                widgets: state.widgets.filter(widget => widget !== action.widget)\n            }\n        case \"FIND_ALL_WIDGETS\":\n            return {\n                ...state,\n                widgets: action.widgets\n            }\n        default:\n            return state\n    }\n\n}\n\nexport default widgetReducer;","\nimport {CREATE_LESSON_FOR_MODULE, DELETE_LESSON, UPDATE_LESSON} from \"../components/LessonTabsComponent\";\nimport {FIND_LESSONS_FOR_MODULE} from \"../components/CourseEditorComponent\";\n\n\nconst initialState = {\n    lessons: [] // to make sure initial state is iterable\n}\n\nconst lessonReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_LESSON:\n            return {\n                ...state,\n                lessons: state.lessons.map(lesson => lesson._id === action.lesson._id ?\n                    action.lesson : lesson)\n            }\n        case DELETE_LESSON:\n            return {\n                ...state,\n                lessons: state.lessons.filter(lesson => lesson._id !== action.lessonId)\n            }\n        case FIND_LESSONS_FOR_MODULE:\n            return {\n                ...state,\n                lessons: action.lessons,\n                // each list of lessons is under the module id\n                // module id is added as attr once component is invoked\n                moduleId: action.moduleId,\n                courseId: action.courseId\n            }\n        case CREATE_LESSON_FOR_MODULE:\n            return {\n                // prev state is copied so we still have module id\n                // after adding new lesson to the list\n                ...state,\n                lessons: [\n                    ...state.lessons,\n                    action.lesson\n                ]\n            }\n        default:\n            return state\n    }\n}\n\nexport default lessonReducer;\n\n\n","import {CREATE_MODULE, DELETE_MODULE, UPDATE_MODULE} from \"../components/ModuleListComponent\";\nimport {FIND_MODULES_FOR_COURSE} from \"../components/CourseEditorComponent\";\n\n\nconst initialState = {\n    modules : []\n}\n\nconst moduleReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case FIND_MODULES_FOR_COURSE:\n            return {\n                ...state,\n                modules: action.modules\n            }\n        case DELETE_MODULE:\n            return {\n                ...state,\n                modules: state.modules.filter(module => module !== action.module)\n            }\n        case CREATE_MODULE:\n            return {\n                ...state,\n                modules: [\n                    ...state.modules,\n                    action.module\n                ]\n            }\n        case UPDATE_MODULE:\n            return {\n                ...state,\n                modules: state.modules.map(module => module._id === action.module._id ? action.module : module)\n            }\n        default:\n            return state\n    }\n}\n\nexport default moduleReducer;","import {SET_COURSES} from \"../components/CourseEditorComponent\";\n\nconst initialState = {\n    courses: [],\n    course: {}\n}\n\nconst courseReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case SET_COURSES:\n            return {\n                ...state,\n                course: action.course\n            }\n        default:\n            return state\n    }\n\n}\n\nexport default courseReducer;\n\n\n\n","import {FIND_TOPICS_FOR_LESSON} from \"../components/CourseEditorComponent\";\nimport {CREATE_TOPIC_FOR_LESSON, DELETE_TOPIC, UPDATE_TOPIC} from \"../components/TopicPillsComponent\";\n\nconst initialState = {\n    topics: []\n}\n\n\nconst topicsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_TOPIC_FOR_LESSON:\n            //console.log(JSON.stringify(action.topics))\n            return {\n                ...state,\n                topics: [\n                    ...state.topics,\n                    action.topic\n                ]\n            }\n        case FIND_TOPICS_FOR_LESSON:\n            return {\n                ...state,\n                topics: action.topics,\n                lessonId: action.lessonId\n            }\n        case DELETE_TOPIC:\n            return {\n                ...state,\n                topics: state.topics.filter(topic => topic._id !== action.topicId)\n            }\n        case UPDATE_TOPIC:\n            return {\n                ...state,\n                topics: state.topics.map(topic => topic._id === action.topic._id ?\n                    action.topic : topic)\n            }\n\n        case \"SET_SELECTED_TOPIC\":\n            return {\n                ...state,\n                selectedId: action.selectedId,\n            }\n\n\n        default:\n            return state;\n    }\n\n}\n\n\nexport default topicsReducer;\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport * as serviceWorker from './serviceWorker';\nimport CourseManagerComponent from \"./components/CourseManagerComponent\";\n\nimport {Provider} from \"react-redux\";\nimport {combineReducers, createStore} from \"redux\";\nimport widgetsReducer from \"./reducers/widgetsReducer\";\nimport lessonReducer from \"./reducers/lessonReducer\";\nimport moduleReducer from \"./reducers/moduleReducer\";\nimport courseReducer from \"./reducers/courseReducer\";\nimport topicsReducer from \"./reducers/topicReducer\";\n\n\nconst reducers = combineReducers({\n    widgetsReducer: widgetsReducer,\n    lessonReducer: lessonReducer,\n    moduleReducer: moduleReducer,\n    courseReducer: courseReducer,\n    topicReducer: topicsReducer,\n})\nconst store = createStore(reducers)\n\n\nReactDOM.render(\n    <Provider store={store}>\n    <CourseManagerComponent/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}